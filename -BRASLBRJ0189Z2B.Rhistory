myGraph <- myDF %>% filter(local %in% finalTabela2$Local[1], genotipo %in% checksF$genotipo)
makeG0(myGraph,"genotipo","cornStunt")
makeG0 <- function(inGraph0, fonte, item){
inGraph0 %>%
ggplot( aes(x=get(fonte), y=get(item), fill=local)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
# theme_ipsum() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(unique(inGraph0$local)) +
xlab(fonte) +
ylab(item)
}
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[1], genotipo %in% checksF$genotipo)
makeG0(myGraph,"genotipo","cornStunt")
makeG0 <- function(inGraph0, fonte, item){
inGraph0 %>%
ggplot( aes(x=get(fonte), y=get(item), fill=local)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(unique(inGraph0$local)) +
xlab(fonte) +
ylab(item)
}
makeG0(myGraph,"genotipo","cornStunt")
# Script para gerar os graficos
require(grid)
require(hrbrthemes)
require(viridis)
require(ggplot2)
makeG0 <- function(inGraph0, fonte, item){
inGraph0 %>%
ggplot( aes(x=get(fonte), y=get(item), fill=local)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle(unique(inGraph0$local)) +
xlab(fonte) +
ylab(item)
}
makeG0(myGraph,"genotipo","cornStunt")
makeH0(myGraph,"genotipo")
makeH0(myGraph,"cornStunt")
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("code/parseCS.R")
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
rawPheno <- readxl::read_xlsx("../data/TPP11.xlsx", sheet="SINGLE OBS DATA")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
myDF <- data.frame(as.character(rawPheno$`PSS:EXT:EXTID`),as.character(rawPheno$ABBRC),
as.numeric(rawPheno$`PSS:REPNO`),as.numeric(rawPheno$`PSS:COSTR`))
colnames(myDF) <- c("local","genotipo","rep","Nota")
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF)
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
# knitr::kable(finalTabela2)
DT::datatable(finalTabela2, options=list(search=list(regex=TRUE, search = '')))
for(i in 1:length(finalTabela2$Local)){
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[i], genotipo %in% checksF$genotipo)
makeG0(myGraph,"genotipo","Nota")
makeH0(myGraph,"Nota")
}
# Script para gerar os graficos
require(grid)
for(i in 1:length(finalTabela2$Local)){
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[i], genotipo %in% checksF$genotipo)
p1 <- makeG0(myGraph,"genotipo","Nota")
p2 <- makeH0(myGraph,"Nota")
grid.arrange(p1, p2, ncol = 2)
}
require(gridExtra)
for(i in 1:length(finalTabela2$Local)){
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[i], genotipo %in% checksF$genotipo)
p1 <- makeG0(myGraph,"genotipo","Nota")
p2 <- makeH0(myGraph,"Nota")
grid.arrange(p1, p2, ncol = 2)
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("code/parseCS.R")
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
rawPheno <- readxl::read_xlsx("../data/TPP11.xlsx", sheet="SINGLE OBS DATA")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
myDF <- data.frame(as.character(rawPheno$`PSS:EXT:EXTID`),as.character(rawPheno$ABBRC),
as.numeric(rawPheno$`PSS:REPNO`),as.numeric(rawPheno$`PSS:COSTR`))
colnames(myDF) <- c("local","genotipo","rep","Nota")
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF)
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
# knitr::kable(finalTabela2)
DT::datatable(finalTabela2, options=list(search=list(regex=TRUE, search = '')))
require(gridExtra)
for(i in 1:length(unique(finalTabela2$Local))){
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[i], genotipo %in% checksF$genotipo)
p1 <- makeG0(myGraph,"genotipo","Nota")
p2 <- makeH0(myGraph,"Nota")
grid.arrange(p1, p2, ncol = 2)
}
pandoc_self_contained_html("../docs/reporteSemanal.html", "final.html")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
rawPheno <- readxl::read_xlsx("../data/TPP11.xlsx", sheet="SINGLE OBS DATA")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
myDF <- data.frame(as.character(rawPheno$`PSS:EXT:EXTID`),as.character(rawPheno$ABBRC),
as.numeric(rawPheno$`PSS:REPNO`),as.numeric(rawPheno$`PSS:COSTR`))
colnames(myDF) <- c("local","genotipo","rep","Nota")
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF)
myDF<-sinoFun(myDF)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF)
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
BLUEs
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
DT::datatable(finalTabela2, options=list(search=list(regex=TRUE, search = '')))
finalTabela2
View(BLUEs)
locAlta <- finalTabela2 %>% filter(classe == "Alta") %>% select(Local)
locAlta
genoAlta <- BLUEs %>% filter(local %in% locAlta)
genoAlta
DT::datatable(genoAlta, options=list(search=list(regex=TRUE, search = '')))
knitr::opts_chunk$set(echo = TRUE)
# rawPheno <- readxl::read_xlsx("data/TPP11.xlsx", sheet="SINGLE OBS DATA")
rawPheno <- readxl::read_xlsx("../data/TPP09.xlsx", sheet="obs")
checksCS <- readxl::read_xlsx("data/suporteMilho.xlsx", sheet="Checks")
# Codigos auxiliares
source("code/parseCS.R")
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
# rawPheno <- readxl::read_xlsx("data/TPP11.xlsx", sheet="SINGLE OBS DATA")
rawPheno <- readxl::read_xlsx("../data/TPP09.xlsx", sheet="obs")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
myDF <- data.frame(as.character(rawPheno$`PSS:EXT:EXTID`),as.character(rawPheno$ABBRC),
as.numeric(rawPheno$`PSS:REPNO`),as.numeric(rawPheno$`PSS:COSTR`))
View(rawPheno)
# rawPheno <- readxl::read_xlsx("data/TPP11.xlsx", sheet="SINGLE OBS DATA")
rawPheno <- readxl::read_xlsx("../data/TPP09.xlsx", sheet="obs")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
myDF <- data.frame(as.character(rawPheno$`PSS:EXT:EXTID`),as.character(rawPheno$ABBRC),
as.numeric(rawPheno$`PSS:REPNO`),as.numeric(rawPheno$`PSS:COSTR`))
colnames(myDF) <- c("local","genotipo","rep","Nota")
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
myDF<-sinoFun(myDF)
myDF<-sinoFun(myDF)
View(myDF)
myDF<-sinoFun(myDF)
sinoFun <- function(sinIN){
# Alterando os sinonimos
for( i in 1:nrow(sinIN)){
# i=2
mySin <- sinIN$genotipo[i]
myName <- sinN %>% filter(genotipo == mySin) %>% dplyr::select(Novo)
if(length(myName[[1]])!=0){
sinIN$genotipo[i] <- myName[[1]]
}
}
return(sinIN)
}
myDF
# Alterando os sinonimos
sinIN <- myDF
i=1
mySin <- sinIN$genotipo[i]
myName <- sinN %>% filter(genotipo == mySin) %>% dplyr::select(Novo)
sinN
library(dplyr)
myName <- sinN %>% filter(genotipo == mySin) %>% dplyr::select(Novo)
sinoFun <- function(sinIN){
# Alterando os sinonimos
# sinIN <- myDF
for( i in 1:nrow(sinIN)){
i=1
mySin <- sinIN$genotipo[i]
myName <- sinN %>% filter(genotipo == mySin) %>% dplyr::select(Novo)
if(length(myName[[1]])!=0){
sinIN$genotipo[i] <- myName[[1]]
}
}
return(sinIN)
}
sinoFun <- function(sinIN){
# Alterando os sinonimos
# sinIN <- myDF
for( i in 1:nrow(sinIN)){
# i=1
mySin <- sinIN$genotipo[i]
myName <- sinN %>% filter(genotipo == mySin) %>% dplyr::select(Novo)
if(length(myName[[1]])!=0){
sinIN$genotipo[i] <- myName[[1]]
}
}
return(sinIN)
}
myDF<-sinoFun(myDF)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF)
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
DT::datatable(finalTabela2, options=list(search=list(regex=TRUE, search = '')))
require(gridExtra)
for(i in 1:length(unique(finalTabela2$Local))){
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[i], genotipo %in% checksF$genotipo)
p1 <- makeG0(myGraph,"genotipo","Nota")
p2 <- makeH0(myGraph,"Nota")
grid.arrange(p1, p2, ncol = 2)
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
# rawPheno <- readxl::read_xlsx("data/TPP11.xlsx", sheet="SINGLE OBS DATA")
rawPheno <- readxl::read_xlsx("../data/TPP09.xlsx", sheet="obs")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
# library(brazilmaps)
library(geobr)
install.packages("geobr")
# library(brazilmaps)
library(geobr)
