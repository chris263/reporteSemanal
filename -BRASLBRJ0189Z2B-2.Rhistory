checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
#
## range and row com nomes diferentes na tpp11
# myDF <- data.frame(as.character(rawPheno$PSS.EXT.EXTID),as.character(rawPheno$ABBRC),
#                    as.numeric(rawPheno$PSS.REPNO),as.numeric(rawPheno$PSS.LFSPR),
#                    as.numeric(rawPheno$VCRD), as.numeric(rawPheno$HCRD))
#
## range and row para tpp09
# myDF <- data.frame(as.character(rawPheno$PSS.EXT.EXTID),as.character(rawPheno$PSS.EEXT.MAT.ABBRC),
#                    as.numeric(rawPheno$PSS.REPNO),as.numeric(rawPheno$PSS.HELMR),
#                    as.numeric(rawPheno$PSS.STRNG), as.numeric(rawPheno$PSS.STROW))
#
# LFSPR mancha branca
colnames(myDF) <- c("local","genotipo","rep","Nota","range","row")
myDF <- myDF %>% filter(Nota>0)
max(myDF$Nota)
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF,sinN)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
# checksCS$Trait <- gsub("GRLSR","manchaFoliar",checksCS$Trait)
# checksCS$Trait <- gsub("HELMR","turcicum",checksCS$Trait)
# checksCS$Trait <- gsub("LFSPR","manchaBranca",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
# checksF <- checksCS %>% filter(Trait == "manchaFoliar")
# checksF <- checksCS %>% filter(Trait == "turcicum")
# checksF <- checksCS %>% filter(Trait == "manchaBranca")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF)
sinoFun <- function(myData, sinIN){
# Alterando os sinonimos
# sinIN <- sinN
# myData <- myDF
for( i in 2:nrow(sinIN)){
# i=2
print(i)
mySin <- sinIN$genotipo[i]
myName <- sinN %>% filter(genotipo == mySin) %>% dplyr::select(Novo)
myData$genotipo <- gsub(mySin,myName$Novo[1],myData$genotipo,fixed = T)
}
return(myData)
}
checksF<-sinoFun(checksF,sinN)
checksF
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
knitr::kable(finalTabela2)
View(BLUEs)
BLUEs <- unique(BLUEs[c("genotipo","local")])
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
checksF
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
# formato csv
rawPheno1 <- read.csv("../data/TPP11_csv_06062022.csv", header=T, sep=",")
rawPheno2 <- read.csv("../data/TPP11_csv.csv", header=T, sep=",")
myDF1 <- data.frame(local=as.character(rawPheno1$PSS.EXT.EXTID),genotipo=as.character(rawPheno1$ABBRC),
rep=as.numeric(rawPheno1$PSS.REPNO),Nota=as.numeric(rawPheno1$PSS.COSTR),
range=as.numeric(rawPheno1$VCRD), row=as.numeric(rawPheno1$HCRD))
myDF2 <- data.frame(local=as.character(rawPheno2$PSS.EXT.EXTID),genotipo=as.character(rawPheno2$ABBRC),
rep=as.numeric(rawPheno2$PSS.REPNO),Nota=as.numeric(rawPheno2$PSS.COSTR),
range=as.numeric(rawPheno2$VCRD), row=as.numeric(rawPheno2$HCRD))
#
# dataPoint1 <- data.frame(local=rawPheno1$PSS.EXT.EXTID,costr=rawPheno1$PSS.COSTR,
#                          grlsr=rawPheno1$PSS.GRLSR,helmr=rawPheno1$PSS.HELMR,
#                          lfspr=rawPheno1$PSS.LFSPR)
# dataPoint2 <- data.frame(local=rawPheno2$PSS.EXT.EXTID,costr=rawPheno2$PSS.COSTR,
#                          grlsr=rawPheno2$PSS.GRLSR,helmr=rawPheno2$PSS.HELMR,
#                          lfspr=rawPheno2$PSS.LFSPR)
#
# dataPoint <- rbind(dataPoint1,dataPoint2)
myDF <- rbind(myDF1,myDF2)
#
# dataPoint$season <- substring(dataPoint$local,3,4)
#
# dataPoint <- dataPoint %>% filter(season %in% "WN")
#
# traits <- c("costr", "grlsr", "helmr", "lfspr")
#
# for(i in 1:length(traits)){
#   # i=1
#
#   trt <- nrow(dataPoint %>% filter(traits[1] > 0) %>% select(traits[2]))
#   cat(traits[i],":",trt,"\n")
# }
#
# # Número de locais totais
# nL <- length(unique(dataPoint$local))
#
# # Numero de COSTR
# costr <- nrow(dataPoint %>% filter(costr >0 ) %>% select(costr))
#
# # Numero de grlsr
# grlsr <- nrow(dataPoint %>% filter(grlsr >0 ) %>% select(grlsr))
#
# # Numero de helmr
# helmr <- nrow(dataPoint %>% filter(helmr >0 ) %>% select(helmr))
#
# # Numero de helmr
# lfspr <- nrow(dataPoint %>% filter(lfsrpr >0 ) %>% select(lfsrpr))
# rawPheno <- readxl::read_xlsx("../data/TPP11_06062022.xlsx", sheet="SINGLE OBS DATA")
# rawPheno <- readxl::read_xlsx("../data/TPP11.xlsx", sheet="SINGLE OBS DATA")
# rawPheno <- readxl::read_xlsx("../data/TPP09_0606222.xlsx", sheet="obs")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
#
## range and row com nomes diferentes na tpp11
# myDF <- data.frame(as.character(rawPheno$PSS.EXT.EXTID),as.character(rawPheno$ABBRC),
#                    as.numeric(rawPheno$PSS.REPNO),as.numeric(rawPheno$PSS.LFSPR),
#                    as.numeric(rawPheno$VCRD), as.numeric(rawPheno$HCRD))
#
## range and row para tpp09
# myDF <- data.frame(as.character(rawPheno$PSS.EXT.EXTID),as.character(rawPheno$PSS.EEXT.MAT.ABBRC),
#                    as.numeric(rawPheno$PSS.REPNO),as.numeric(rawPheno$PSS.HELMR),
#                    as.numeric(rawPheno$PSS.STRNG), as.numeric(rawPheno$PSS.STROW))
#
# LFSPR mancha branca
colnames(myDF) <- c("local","genotipo","rep","Nota","range","row")
myDF <- myDF %>% filter(Nota>0)
max(myDF$Nota)
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF,sinN)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
# checksCS$Trait <- gsub("GRLSR","manchaFoliar",checksCS$Trait)
# checksCS$Trait <- gsub("HELMR","turcicum",checksCS$Trait)
# checksCS$Trait <- gsub("LFSPR","manchaBranca",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
# checksF <- checksCS %>% filter(Trait == "manchaFoliar")
# checksF <- checksCS %>% filter(Trait == "turcicum")
# checksF <- checksCS %>% filter(Trait == "manchaBranca")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF,sinN)
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
BLUEs <- unique(BLUEs[c("genotipo","local")])
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
knitr::kable(finalTabela2)
checksF
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
knitr::kable(finalTabela2)
require(gridExtra)
for(i in 1:length(unique(finalTabela2$Local))){
# i=1
myGraph <- myDF %>% filter(local %in% finalTabela2$Local[i], genotipo %in% checksF$genotipo)
p1 <- makeG0(myGraph,"genotipo","Nota")
p2 <- makeH0(myGraph,"Nota")
p3 <- makeG9(myGraph,c("MS","MT"))
p4 <- makeG9(myGraph,c("S","T"))
# grid.arrange(p1, p2, ncol = 2)
grid.arrange(p3, p4, ncol = 2)
}
# DT:knitr::kable(finalTabela2)
DT::datatable(finalTabela2, options=list(search=list(regex=TRUE, search = '')))
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
# formato csv
rawPheno1 <- read.csv("../data/TPP11_csv_06062022.csv", header=T, sep=",")
rawPheno2 <- read.csv("../data/TPP11_csv.csv", header=T, sep=",")
myDF1 <- data.frame(local=as.character(rawPheno1$PSS.EXT.EXTID),genotipo=as.character(rawPheno1$ABBRC),
rep=as.numeric(rawPheno1$PSS.REPNO),Nota=as.numeric(rawPheno1$PSS.COSTR),
range=as.numeric(rawPheno1$VCRD), row=as.numeric(rawPheno1$HCRD))
myDF2 <- data.frame(local=as.character(rawPheno2$PSS.EXT.EXTID),genotipo=as.character(rawPheno2$ABBRC),
rep=as.numeric(rawPheno2$PSS.REPNO),Nota=as.numeric(rawPheno2$PSS.COSTR),
range=as.numeric(rawPheno2$VCRD), row=as.numeric(rawPheno2$HCRD))
#
# dataPoint1 <- data.frame(local=rawPheno1$PSS.EXT.EXTID,costr=rawPheno1$PSS.COSTR,
#                          grlsr=rawPheno1$PSS.GRLSR,helmr=rawPheno1$PSS.HELMR,
#                          lfspr=rawPheno1$PSS.LFSPR)
# dataPoint2 <- data.frame(local=rawPheno2$PSS.EXT.EXTID,costr=rawPheno2$PSS.COSTR,
#                          grlsr=rawPheno2$PSS.GRLSR,helmr=rawPheno2$PSS.HELMR,
#                          lfspr=rawPheno2$PSS.LFSPR)
#
# dataPoint <- rbind(dataPoint1,dataPoint2)
myDF <- rbind(myDF1,myDF2)
distinct(myDF, c(local,genotipo,rep), .keep_all = TRUE)
distinct(myDF, local,genotipo,rep, .keep_all = TRUE)
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
# formato csv
rawPheno1 <- read.csv("../data/TPP11_csv_06062022.csv", header=T, sep=",")
rawPheno2 <- read.csv("../data/TPP11_csv.csv", header=T, sep=",")
myDF1 <- data.frame(local=as.character(rawPheno1$PSS.EXT.EXTID),genotipo=as.character(rawPheno1$ABBRC),
rep=as.numeric(rawPheno1$PSS.REPNO),Nota=as.numeric(rawPheno1$PSS.COSTR),
range=as.numeric(rawPheno1$VCRD), row=as.numeric(rawPheno1$HCRD))
myDF2 <- data.frame(local=as.character(rawPheno2$PSS.EXT.EXTID),genotipo=as.character(rawPheno2$ABBRC),
rep=as.numeric(rawPheno2$PSS.REPNO),Nota=as.numeric(rawPheno2$PSS.COSTR),
range=as.numeric(rawPheno2$VCRD), row=as.numeric(rawPheno2$HCRD))
#
# dataPoint1 <- data.frame(local=rawPheno1$PSS.EXT.EXTID,costr=rawPheno1$PSS.COSTR,
#                          grlsr=rawPheno1$PSS.GRLSR,helmr=rawPheno1$PSS.HELMR,
#                          lfspr=rawPheno1$PSS.LFSPR)
# dataPoint2 <- data.frame(local=rawPheno2$PSS.EXT.EXTID,costr=rawPheno2$PSS.COSTR,
#                          grlsr=rawPheno2$PSS.GRLSR,helmr=rawPheno2$PSS.HELMR,
#                          lfspr=rawPheno2$PSS.LFSPR)
#
# dataPoint <- rbind(dataPoint1,dataPoint2)
myDFF <- rbind(myDF1,myDF2)
myDFF <- myDFF %>% filter(local %in% "22WNUBYG501BU22")
View(myDFF)
nrow(myDFF)
myDF <- distinct(myDFF, local,genotipo,rep, .keep_all = TRUE)
nrow(myDF)
View(myDF)
#
# dataPoint1 <- data.frame(local=rawPheno1$PSS.EXT.EXTID,costr=rawPheno1$PSS.COSTR,
#                          grlsr=rawPheno1$PSS.GRLSR,helmr=rawPheno1$PSS.HELMR,
#                          lfspr=rawPheno1$PSS.LFSPR)
# dataPoint2 <- data.frame(local=rawPheno2$PSS.EXT.EXTID,costr=rawPheno2$PSS.COSTR,
#                          grlsr=rawPheno2$PSS.GRLSR,helmr=rawPheno2$PSS.HELMR,
#                          lfspr=rawPheno2$PSS.LFSPR)
#
# dataPoint <- rbind(dataPoint1,dataPoint2)
myDFF <- rbind(myDF1,myDF2)
myDFF <- na.omit(myDFF)
nrow(myDFF)
myDFF <- myDFF %>% filter(local %in% "22WNUBYG501BU22")
nrow(myDFF)
myDF <- distinct(myDFF, local,genotipo,rep, .keep_all = TRUE)
nrow(myDF)
#
# dataPoint1 <- data.frame(local=rawPheno1$PSS.EXT.EXTID,costr=rawPheno1$PSS.COSTR,
#                          grlsr=rawPheno1$PSS.GRLSR,helmr=rawPheno1$PSS.HELMR,
#                          lfspr=rawPheno1$PSS.LFSPR)
# dataPoint2 <- data.frame(local=rawPheno2$PSS.EXT.EXTID,costr=rawPheno2$PSS.COSTR,
#                          grlsr=rawPheno2$PSS.GRLSR,helmr=rawPheno2$PSS.HELMR,
#                          lfspr=rawPheno2$PSS.LFSPR)
#
# dataPoint <- rbind(dataPoint1,dataPoint2)
myDFF <- rbind(myDF1,myDF2)
myDFF <- na.omit(myDFF)
myDF <- distinct(myDFF, local,genotipo,rep, .keep_all = TRUE)
nrow(myDF)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(dplyr)
# Codigos auxiliares
source("../code/parseCS.R")
source("../code/acuraciaCS.R")
source("../code/selectionIndex.R")
source("../code/graficos.R")
# formato csv
rawPheno1 <- read.csv("../data/TPP11_csv_06062022.csv", header=T, sep=",")
rawPheno2 <- read.csv("../data/TPP11_csv.csv", header=T, sep=",")
myDF1 <- data.frame(local=as.character(rawPheno1$PSS.EXT.EXTID),genotipo=as.character(rawPheno1$ABBRC),
rep=as.numeric(rawPheno1$PSS.REPNO),Nota=as.numeric(rawPheno1$PSS.COSTR),
range=as.numeric(rawPheno1$VCRD), row=as.numeric(rawPheno1$HCRD))
myDF2 <- data.frame(local=as.character(rawPheno2$PSS.EXT.EXTID),genotipo=as.character(rawPheno2$ABBRC),
rep=as.numeric(rawPheno2$PSS.REPNO),Nota=as.numeric(rawPheno2$PSS.COSTR),
range=as.numeric(rawPheno2$VCRD), row=as.numeric(rawPheno2$HCRD))
#
# dataPoint1 <- data.frame(local=rawPheno1$PSS.EXT.EXTID,costr=rawPheno1$PSS.COSTR,
#                          grlsr=rawPheno1$PSS.GRLSR,helmr=rawPheno1$PSS.HELMR,
#                          lfspr=rawPheno1$PSS.LFSPR)
# dataPoint2 <- data.frame(local=rawPheno2$PSS.EXT.EXTID,costr=rawPheno2$PSS.COSTR,
#                          grlsr=rawPheno2$PSS.GRLSR,helmr=rawPheno2$PSS.HELMR,
#                          lfspr=rawPheno2$PSS.LFSPR)
#
# dataPoint <- rbind(dataPoint1,dataPoint2)
myDFF <- rbind(myDF1,myDF2)
myDFF <- na.omit(myDFF)
myDF <- distinct(myDFF, local,genotipo,rep, .keep_all = TRUE)
#
# dataPoint$season <- substring(dataPoint$local,3,4)
#
# dataPoint <- dataPoint %>% filter(season %in% "WN")
#
# traits <- c("costr", "grlsr", "helmr", "lfspr")
#
# for(i in 1:length(traits)){
#   # i=1
#
#   trt <- nrow(dataPoint %>% filter(traits[1] > 0) %>% select(traits[2]))
#   cat(traits[i],":",trt,"\n")
# }
#
# # Número de locais totais
# nL <- length(unique(dataPoint$local))
#
# # Numero de COSTR
# costr <- nrow(dataPoint %>% filter(costr >0 ) %>% select(costr))
#
# # Numero de grlsr
# grlsr <- nrow(dataPoint %>% filter(grlsr >0 ) %>% select(grlsr))
#
# # Numero de helmr
# helmr <- nrow(dataPoint %>% filter(helmr >0 ) %>% select(helmr))
#
# # Numero de helmr
# lfspr <- nrow(dataPoint %>% filter(lfsrpr >0 ) %>% select(lfsrpr))
# rawPheno <- readxl::read_xlsx("data/TPP11_06062022.xlsx", sheet="SINGLE OBS DATA")
# rawPheno <- readxl::read_xlsx("data/TPP11.xlsx", sheet="SINGLE OBS DATA")
# rawPheno <- readxl::read_xlsx("data/TPP09_0606222.xlsx", sheet="obs")
checksCS <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Checks")
checksCS$Esperado <- as.numeric(checksCS$Esperado)
sinN <- readxl::read_xlsx("../data/suporteMilho.xlsx", sheet="Sinonimos")
colnames(sinN) <- c("genotipo","Novo")
#Analisar yiedl junto?
duasT <- "no"
#limites
limiteAlta <- 2 #Desvio a partir de 2 passa a ser alta
limiteBaixa <- -1 #Desvio entre -1 e 2 é media pressao
# quality control
qControl <- 0.3 #trashold
#
## range and row com nomes diferentes na tpp11
# myDF <- data.frame(as.character(rawPheno$PSS.EXT.EXTID),as.character(rawPheno$ABBRC),
#                    as.numeric(rawPheno$PSS.REPNO),as.numeric(rawPheno$PSS.LFSPR),
#                    as.numeric(rawPheno$VCRD), as.numeric(rawPheno$HCRD))
#
## range and row para tpp09
# myDF <- data.frame(as.character(rawPheno$PSS.EXT.EXTID),as.character(rawPheno$PSS.EEXT.MAT.ABBRC),
#                    as.numeric(rawPheno$PSS.REPNO),as.numeric(rawPheno$PSS.HELMR),
#                    as.numeric(rawPheno$PSS.STRNG), as.numeric(rawPheno$PSS.STROW))
#
# LFSPR mancha branca
colnames(myDF) <- c("local","genotipo","rep","Nota","range","row")
myDF <- myDF %>% filter(Nota>0)
max(myDF$Nota)
# Padronizando nomes
# Removendo espaços
myDF$genotipo <- gsub(" ", "", myDF$genotipo, fixed = TRUE)
myDF$local <- gsub(" ", "", myDF$local, fixed = TRUE)
# Padronizando para letras maiusculas
myDF$genotipo <- toupper(myDF$genotipo)
myDF$local <- toupper(myDF$local)
myDF<-sinoFun(myDF,sinN)
#Preparando o arquivo com checks
checksCS$Genotipo <- gsub(" ", "", checksCS$Genotipo, fixed = TRUE)
checksCS$Genotipo <- toupper(checksCS$Genotipo)
checksCS$Trait <- gsub("COSTR","cornStunt",checksCS$Trait)
# checksCS$Trait <- gsub("GRLSR","manchaFoliar",checksCS$Trait)
# checksCS$Trait <- gsub("HELMR","turcicum",checksCS$Trait)
# checksCS$Trait <- gsub("LFSPR","manchaBranca",checksCS$Trait)
checksF <- checksCS %>% filter(Trait == "cornStunt")
# checksF <- checksCS %>% filter(Trait == "manchaFoliar")
# checksF <- checksCS %>% filter(Trait == "turcicum")
# checksF <- checksCS %>% filter(Trait == "manchaBranca")
colnames(checksF) <- c("genotipo", "Check", "Trait", "Esperado", "Tipo")
checksF<-sinoFun(checksF,sinN)
myDF$season <- substring(myDF$local,3,4)
myDF <- myDF %>% filter(season %in% "WN")
entradasLoc <- as.data.frame(tapply(myDF$genotipo, myDF$local,length))
entradasLoc <- entradasLoc %>% mutate(local = rownames(entradasLoc))
colnames(entradasLoc)[1] <- "Entradas"
entradasLoc <- entradasLoc %>% arrange(Entradas)
# entradasLoc <- na.omit(entradasLoc)
require(forcats)
library(ggplot2)
# Reorder following the value of another column:
entradasLoc %>% mutate(local=fct_reorder(local, desc(Entradas))) %>%
ggplot( aes(x=local, y=Entradas)) +
geom_bar(stat="identity", fill="#f68060", alpha=.6, width=.4) + coord_flip() +
xlab("Locais") + ylab("Numero de Entradas") +
theme_bw()
# Filtrar por local
entradasLoc <- entradasLoc %>% filter(Entradas>30)
dfLocal <- entradasLoc$local
# Rodar lme4 para BLUE e Herdabilidade para cada local
BLUEs <- local_blup(dfLocal,"no")
# BLUEs <- unique(BLUEs[c("genotipo","local")])
# Classificando como alta - media - baixa pressao
classifica <- classLocations(BLUEs, checksF)
classifica$Local <- as.character(classifica$Local)
resumoLoc$local <- as.character(resumoLoc$local)
# Juntando com os dados de Herdabilidade
novaTabela <- left_join(classifica,resumoLoc,by=c("Local"="local"))
novaTabela$Desvio <- round(novaTabela$Desvio,3)
if(duasT=="no"){
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N)/2,3)
}else{
novaTabela$Acuracia <- round((1-(novaTabela$Probabilidade)+novaTabela$H2N+novaTabela$H2Y)/3,3)
}
# Indice de qualidade/Acuracia
finalTabela <- finalClass(novaTabela, qControl, limiteAlta, limiteBaixa)
finalTabela2 <- finalTabela %>% dplyr::select(Local,classe,Controles,Desvio) # Pode Adicionar Acuracia
# DT:knitr::kable(finalTabela2)
DT::datatable(finalTabela2, options=list(search=list(regex=TRUE, search = '')))
write.csv(finalTabela2,"../data/locaisClasse0606.csv",row.names = F)
